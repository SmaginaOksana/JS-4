// Задание 1
// Написать функцию, которая принимает два параметра и складывает их.
// Предусмотреть проверку на тип данных. Если хоть один из параметров не является числом, должно выводиться ообщение об ошибке. Также обраьботайте случай, если не было введено два параметра.

// const sum = function (a, b) {
//   if (a === undefined || b === undefined) {
//     console.log("введите два параметра");
//   } else if (typeof a !== "number" || typeof b !== "number") {
//     console.log("введенные данные не являются числами");
//   } else {
//     return a + b;
//   }
// };
// console.log(sum(5, 9));

// Задание 2
// Измените функцию "square" так, чтобы в случае ее вызова без аргумента генерировалась консольная ошибка (console.error):
// "Функция "square" не может быть вызвана без аргумента"

// function square(a) {
//   console.log(a * a)
// }
// square(10) // 100
// square()
// ДО: NaN
// ПОСЛЕ: Uncaught Error: Функция "square" не может быть вызвана без аргумента

// function square(a) {
//   if (a === undefined) {
//     console.log(
//       `Uncaught Error: Функция square не может быть вызвана без аргумента`
//     );
//   }
//   console.log(a * a);
// }
// square();

// Задание 3
// Создать функцию "угадай число". Она принимает число от 1 до 10 (обязательно проверить, что число не больше 10 и не меньше 0). Генерирует рандомное число от 1 до 10 и сравнивает с заданным числом.
// Если они совпали, то возвращает “Вы выиграли”, если нет - то “Вы не угадали, ваше число -  ...,  а выпало число ...”
// Функция создания случайного числа уже была ранее в материалах, в задаче по созданию случайного цвета.
// Написать функцию в стрелочном синтаксисе.

// function getRandomInteger(min, max) {
//   return Math.floor(Math.random() * (max - min)) + min;
// }
// const guessNumber = (a) => {
//   const b = getRandomInteger(1, 10);
//   if (a <= 10 && a > 0) {
//     if (a === b) {
//       console.log(`Вы выиграли!`);
//     } else {
//       console.log(`Вы не угадали, Ваше число - ${a}, а выпало число ${b}`);
//     }
//   } else {
//     console.log(`Введенное число вне диапазона`);
//   }
// };
// console.log(guessNumber(5));

// Задание 4
// Напишите функцию copyArr(arr), которая копирует массив, не изменяя оригинал. Используйте подходящий метод массива - forEach или map.

// const arr = ["Oksana", "Anna", "Svetlana"];
// const copyArr = arr.map((array) => array);
// console.log(copyArr);

// Задание 5
// Напишите функцию, которая принимает массив имен и возвращает новый массив, в котором каждое имя будет иметь приставку "Hello, "

// const names = ["Oksana", "Anna", "Svetlana"];
// const newNames = names.map((item) => "Hello " + item);
// console.log(newNames);

// Задание 6
// Напишите функцию, которая принимает массив объектов пользователей и возвращает новый массив, содержащий только их имена.

// const users = [
//   { user: "Oleg", login: "oleg_03", password: "Oleg123" },
//   { user: "Sveta", login: "sveta_03", password: "Sveta123" },
//   { user: "Kirill", login: "kirill_03", password: "Kirill123" },
// ];

// const names = users.map((item) => item.user);
// console.log(names);

// Задание 7
// Создайте функцию sumObjectValues, которая будет суммировать все значения свойств, которые являются числами. Сумму чисел необходимо вернуть из функции.

// const objectWithNumbers = {
//   a: 10,
//   b: 20,
//   c: "string",
//   d: 12,
// };

// const sumObjectValues = (a) => {
//   let sum = 0;
//   for (let key in a) {
//     if (typeof a[key] === "number") {
//       sum += a[key];
//     }
//   }
//   return sum;
// };
// console.log(sumObjectValues(objectWithNumbers));

// Задание 8
// Напишите функцию ucFirst(str), возвращающую строку str с заглавным первым символом.
// Вам понадобятся методы строк.

// let str = "my name is Oksana";

// const ucFirst = (a) => {
//   const newStr = a[0].toUpperCase() + a.slice(1);
//   return newStr;
// };
// console.log(ucFirst(str));

// или:
// const ucFirst = str[0].toUpperCase() + str.slice(1);
// console.log(ucFirst);

// Задание 9
// Напишите функцию checkSpam(str), возвращающую true, если str содержит 'badWord' или 'XXX', а иначе false.
// Функция должна быть нечувствительна к регистру.

// let str = "XXX";

// const checkSpam = (a) => {
//   const newStr = a.toLowerCase();
//   if (newStr.includes("badword")) {
//     return true;
//   } else if (newStr.includes("xxx")) {
//     return true;
//   } else {
//     return false;
//   }
// };
// console.log(checkSpam(str));

// Задание 10
// Написать функцию, которой на вход подается строка, на выход она дает символы наоборот (разворачивает строку). Пример: «привет, Женя» -> «янеЖ ,тевирп»
// Обратите внимание: метод reverse существует только у массивов.

// let string = "привет, Женя";
// const str = (a) => {
//   a = a.split(``);
//   a = a.reverse();
//   a = a.join(``);
//   return a;
// };
// console.log(str(string));

// Задание 11
// Массив содержит строки с информацией о железнодорожных станциях на севере Англии. Строки представляют собой трёхбуквенный код станции, затем некоторые машиночитаемые данные, за которыми следует точка с запятой, а затем название станции, пригодное для чтения человеком.
// Необходимо извлечь код станции и имя и поместить их в строку со следующей структурой:
// MAN: Manchester Piccadilly
// Вывести эти строки в консоль
// ПОДСКАЗКА:
// 1. Извлеките трёхбуквенный код станции и сохраните его в новой переменной.
// 2. Найдите номер символьного номера точки с запятой.
// 3. Извлеките название для чтения человеком, используя номер индекса точки с запятой в качестве контрольной точки и сохраните его в новой переменной.
// 4. Объедините две новые переменные и строк.

// let stations = [
//   "MAN675847583748sjt567654;Manchester Piccadilly",
//   "GNF576746573fhdg4737dh4;Greenfield",
//   "LIV5hg65hd737456236dch46dg4;Liverpool Lime Street",
//   "SYB4f65hf75f736463;Stalybridge",
//   "HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield",
// ];

// const getStations = (arr) => {
//   let codeStation;
//   let nameStation;

//   for (let item of arr) {
//     codeStation = item.slice(0, 3);
//     const indexSt = item.indexOf(";");
//     nameStation = item.slice(indexSt + 1);
//     console.log(`${codeStation} : ${nameStation}`);
//   }
// };
// getStations(stations);

// Задание 12
// Напишите функцию unique(arr), которая принимает массив, а возвращает новый массив, содержащий только уникальные элементы arr.

// let strings = [
//   "кришна",
//   "кришна",
//   "харе",
//   "харе",
//   "харе",
//   "харе",
//   "кришна",
//   "кришна",
//   ":-O",
// ];

// function unique(array) {
//   const Arr = [];
//   const newArr = array.filter((item) => {
//     if (Arr.includes(item) === false) {
//       Arr.push(item);
//     }
//   });
//   return Arr;
// }
// console.log(unique(strings));

// Задание 13
// Женя и Юля изучают кошек. Каждая из них узнала у 10 владельцев кошек о возрасте их кошки и сохранила данные в массиве (по одному массиву для каждой девочки). На данный момент им просто интересно узнать, является ли кошка взрослой или котёнком.
// Кошка считается взрослой, если ей не менее 2 лет, и котёнком, если ей менее 2 лет.
// Создайте функцию verifyCats, которая принимает 2 массива возрастов кошек (catsJane и catsJulia) и выполняет следующие действия:
// 1. Женя выяснила, что владельцы первой и последней кошки на самом деле имеют собак, а не кошек! Поэтому удалите возраст собак из Жениного массива.
// 2. Создайте общий массив с данными Жени (исправленными) и Юли.
// 3. Для каждой кошки этого общего массива выведите в консоль текст:
// - если кошка взрослая -  Кошка № 1 взрослая, ей 6 лет
// - если котёнок - Кошка № 2 ещё котёнок
// 4. Вызовите функцию для двух наборов тестовых данных.
// Тестовые данные:
// 1.  Данные Жени [4, 5, 3, 11, 6, 2, 4, 1, 5, 9]
// Данные Юли [2, 4, 5, 1, 13, 2, 15, 8, 3, 7]
// 2.  Данные Жени [3, 5, 9, 14, 1, 2, 6, 8, 3, 10]
// Данные Юли [8, 2, 10, 1, 2, 5, 6, 3, 1, 4]
// В задании необходимо использовать методы массивов: forEach, slice, concat

// let Zhenya1 = [4, 5, 3, 11, 6, 2, 4, 1, 5, 9];
// let Yulya1 = [2, 4, 5, 1, 13, 2, 15, 8, 3, 7];
// let Zhenya2 = [3, 5, 9, 14, 1, 2, 6, 8, 3, 10];
// let Yulya2 = [8, 2, 10, 1, 2, 5, 6, 3, 1, 4];

// const verifyCats = (arr1, arr2) => {
//   const newArr1 = arr1.slice(1, 9);
//   const arrTotal = newArr1.concat(arr2);
//   arrTotal.forEach((item, index) => {
//     if (item >= 2) {
//       console.log(`Кошка № ${index + 1} взрослая, ей ${item} лет`);
//     } else if (item < 2) {
//       console.log(`Кошка № ${index + 1} еще котенок`);
//     }
//   });
// };
// verifyCats(Zhenya2, Yulya2);

// Задание 14
// Решить 4 задание из прошлой темы, используя метод filter
// Определить массив, например let arr = [5, 4, 3, 8, 0];
// Создать функцию filterFor(arr, a). Функция должна вернуть новый массив из элементов arr, но в нем должны содержаться элементы, которые больше или равны (>=) значения переменной a.
// Например, запуск функции filterFor(arr, 5) дает результат [5,8]
// запуск функции filterFor(arr, 10) дает результат []
// запуск функции filterFor(arr, 3.11) дает результат [4,5,8]

// let numbers = [42, 65, 49, 68, 56, 47, 70, 42, 51, 35, 58, 63, 40, 70];
// const newNumbers = numbers.filter((item, index) => {
//   console.log(`Индексу ${index} соответствует число ${item}`);
// });

// let arr = [5, 4, 3, 8, 0];
// const filterFor = (array, a) => {
//   const newArray = array.filter((item) => {
//     return item >= a;
//   });
//   return newArray;
// };

// console.log(filterFor(arr, 8));

// Задание 15
// Описать функцию, которая принимает массив строк и возвращает массив, содержащий только строки более 3-х символов. Проверить работу функции на примере:  ['yes', 'hello', 'no', 'easycode', 'what'].
//
// let arr = ["yes", "hello", "no", "easycode", "what"];
// const symbols = (array) => {
//   const newArr = array.filter((item) => {
//     if (item.length > 3) {
//       return item;
//     }
//   });
//   return newArr;
// };
// console.log(symbols(arr));

// Задание 16
// Отсортируйте массив массивов так, чтобы вначале располагались наименьшие массивы (размер массива определяется его длиной): [ [14, 45], [1], ['a', 'c', 'd'] ] → [ [1], [14, 45], ['a', 'c', 'd'] ]
// // ПОДСКАЗКА. Для правильной сортировки метод sort принимает функцию, параметры которой a и b - это элементы массива. В данной задаче элементы массива, то есть параметры a и b, сами являются массивами и обладают всеми свойствами массивов.
//
// let arr = [[14, 45], [1], ["a", "c", "d"]];

// const sortedArr = arr.sort((a, b) => {
//   if (a.length > b.length) {
//     return 1;
//   } else {
//     return -1;
//   }
// });
// console.log(sortedArr);

// Задание 17
// Создайте функцию getAverageHumanAge, которая принимает массив возрастов кошек (catAges) и выполняет следующие действия по порядку:
// 1. Рассчитывает человеческий возраст по следующей формуле: если возраст кошки <= 2 года, человеческий возраст = возраст кошки * 10. Если кошке больше 2 лет, человеческий возраст = возраст кошки * 7. (сделать через map)
// 2. Исключает всех кошек младше 18 человеческих лет. (сделать через filter)
// 3. Возвращает средний человеческий возраст для всех взрослых кошек. (сумму для среднего посчитать через reduce)
// Вызовите функцию для обоих наборов тестовых данных.
// Тестовые данные:
// 1: [7 , 3, 2, 4, 1, 15, 8, 1, 9, 2]
// 2: [1, 16, 12, 4, 5, 1, 3, 11, 7, 2]
// В задании необходимо использовать методы массивов: map, filter, reduce

// let catAges1 = [7, 3, 2, 4, 1, 15, 8, 1, 9, 2];
// let catAges2 = [1, 16, 12, 4, 5, 1, 3, 11, 7, 2];

// const getAverageHumanAge = (arr) => {
//   const humanAge = arr.map((item) => {
//     if (item <= 2) {
//       return (item *= 10);
//     } else {
//       return (item *= 7);
//     }
//   });
//   const newHumanAge = humanAge.filter((item, index) => {
//     if (item >= 18) {
//       return item;
//     }
//   });
//   const AverageHumanAge = newHumanAge.reduce((acc, item) => {
//     return acc + item;
//   });
//   return AverageHumanAge / newHumanAge.length;
// };
// console.log(getAverageHumanAge(catAges1));
